Titolo generico su come fare le cose su github per i pack di arm (pls fix il titolo)

Scrivo questo tutorial velocemente prima di partire di nuovo. L’obiettivo è un tutorial conciso e funzionale per spiegare il perché di questa scelta e come lavorarci.

Innanzitutto, GitHub è un sito che viene usato principalmente per gestire il codice dei software in via di sviluppo, quindi nel tutorial mi riferirò a ciò che serve a noi con la parola “codice” perché suona meglio ed è più breve.

La base di tutto è la cosiddetta “repository” o in breve “repo”. È paragonabile a una cartella che contiene tutto il nostro codice, che siano file, immagini o codice vero e proprio.
GitHub permette di mantenere dei file in modo ordinato e permette a chiunque di mandare modifiche tramite un sistema di “pull request”. La pull request è una richiesta al possessore del codice di implementare una modifica (comunemente chiamato “commit”), quando la pull request viene accettata vedremo le nostre modifiche implementate nel codice. È anche possibile testare in prima persona queste modifiche creando un “fork” del codice, ovvero una copia identica in tutto e per tutto che però si trova in una repo diversa e appartiene a noi, quindi siamo liberi di farci quello che vogliamo (utile per sperimentare).

Cosa c’entra tutto questo con ARM? Ultimamente ho passato alcuni pack di auto (quelli più usati e richiesti) su una repo di GitHub. Ciò rende il tutto estremamente semplice da aggiornare e in più permette a tutti di apportare modifiche, riducendo i tempi di attesa e il rischio che i file vengano persi per strada. Il sistema attuale implica che chiunque possa modificare i pack esistenti (a patto ovviamente che le modifiche vengano proposte tramite una pull request e che questa venga poi accettata). Un esempio può essere il pack dei pandini, ogni tanto qualcuno vuole modificare il suo pandino o crearne uno nuovo per un altro utente, allora basta creare una pull request con il pandino modificato o nuovo e quando questa verrà accettata si potrà caricare il pack aggiornato sul forum e sulla sezione scambio files di discord.

Come si procede? Prima di tutto è necessario avere un account GitHub. Per crearne uno basta seguire la procedura di registrazione su github.com
Una volta completata la procedura bisogna andare alla pagina https://github.com/Vas0sky/armpack e cliccare il pulsante “Fork” (questo è necessario per poter mandare pull request; per procedere con questa operazione è necessario aver verificato l’indirizzo email).
Ora, procediamo alla creazione di una pull request. Innanzitutto bisogna apportare delle modifiche al pack, quindi ci dirigiamo all’interno della cartella in cui si trova il file che vogliamo modificare/aggiungere e trasciniamo i nuovi file in stile drag and drop nella finestra di github (possiamo anche aggiungere i file usando il pulsante “Upload Files”, ma bisogna tenere a mente che github non permette la creazione di cartelle vuote). Una volta fatto ciò, nella schermata del nostro fork comparirà una scritta simile a “This branch is 1 commit ahead of Vas0sky:master.” e alla destra due pulsanti nuovi: “Pull Request” (ciò che serve a noi) e “Compare” (il nome dice tutto).
Schiacciamo “pull request” lasciando tutte le impostazioni così come sono e schiacciamo il grosso pulsante verde “Create Pull Request”, che diventerà una text box con tanto di titolo (per far capire al volo a chi accetta la richiesta in cosa consiste la modifica, il titolo deve essere conciso e chiaro, mentre la descrizione può dilungarsi ed essere più dettagliata). Assicuratevi di lasciare spuntata la casella “Allow edits from mantainers”, in modo che il commit contenuto nella vostra pull request possa essere modificato (per un motivo o per un altro, come ad esempio una cartella sbagliata). Se così non fosse il mantainer sarebbe costretto semplicemente a rifiutare la vostra pull request.
Una volta terminato cliccate su create pull request (sempre il pulsante verde) e verrete reindirizzati a una pagina dove potrete revisionare la vostra pull request o chiuderla in caso vi siate accorti di errori o ci abbiate ripensato. Il vostro lavoro ora è finito e dovrete solo aspettare che il mantainer della repo accetti la pull request.

Piccolo consiglio: se siete su windows vi consiglio assolutamente il client desktop di github, disponibile al sito desktop.github.com. Il vantaggio principale di questo client è che vi permette di aprire la repo usando esplora risorse di windows, cosa molto comoda nel caso in cui dobbiamo spostare più file contemporaneamente in diverse cartelle. Il client è molto intuitivo e non dovrebbe necessitare di un tutorial dedicato ma sono disponibile a rispondere alle domande su telegram. 

